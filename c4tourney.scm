(load "c4minimax.scm")

;; Chun Hui
(define (ch-checkpos b)
  (cond
    ((= 1 (get b 1 2)) 999)
    ((= 2 (get b 1 2)) -999)
    (else (get b 1 2) 5)))

(define be empty-board)

(define (ch-quad-score w x y z)
  (cond 
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and (= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and (= w 1) (= x 1) (= y 1) (= z 0)) 64)
    ((and (= w 1) (= x 1) (= y 1) (= z 1)) 999)
    ((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and (= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and (= w 2) (= x 2) (= y 2) (= z 0))-64)
    ((and (= w 2) (= x 2) (= y 2) (= z 2)) -999)
     (else 0)))

(define (ch-column-score c)
  (+ (ch-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (ch-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (ch-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))))
;(ch-column-score #(1 2 1 1 0 0))
;(ch-column-score #(1 2 1 2 0 0))
;(ch-column-score #(1 2 2 2 0 0))
(define (ch-board-score b)
  (+ (ch-column-score (vr b 0)) (ch-column-score (vr b 1))
     (ch-column-score (vr b 2)) (ch-column-score (vr b 3))
     (ch-column-score (vr b 4)) (ch-column-score (vr b 5))
     (ch-column-score (vr b 6)) (ch-row-score b 0) (ch-row-score b 1)
     (ch-row-score b 2) (ch-row-score b 3)
     (ch-row-score b 4) (ch-row-score b 5)))


(define (ch-horiz-quad-score w x y z)
    (cond
        ((and (= w 0) (= x 0) (= y 0) (= z 1)) 10)
	((and (= w 0) (= x 0) (= y 1) (= z 0)) 10)
	((and (= w 0) (= x 0) (= y 1) (= z 1)) 100)
	((and (= w 0) (= x 1) (= y 0) (= z 0)) 10)
	((and (= w 0) (= x 1) (= y 0) (= z 1)) 999)
	((and (= w 0) (= x 1) (= y 1) (= z 0)) 999)
	((and (= w 0) (= x 1) (= y 1) (= z 1)) 9999)
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 10)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 9999)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 100)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 9999)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 999)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 9999)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 9999)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 9999)

	((and (= w 0) (= x 0) (= y 0) (= z 2)) -10)
	((and (= w 0) (= x 0) (= y 2) (= z 0)) -10)
	((and (= w 0) (= x 0) (= y 2) (= z 2)) -100)
	((and (= w 0) (= x 2) (= y 0) (= z 0)) -10)
	((and (= w 0) (= x 2) (= y 0) (= z 2)) -999)
	((and (= w 0) (= x 2) (= y 2) (= z 0)) -999)
	((and (= w 0) (= x 2) (= y 2) (= z 2)) -9999)
	((and (= w 2) (= x 0) (= y 0) (= z 0)) -10)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) -9999)
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -100)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -9999)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -999)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -9999)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -9999)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -9999)
         (else 0)))

(define (ch-horiz-from b c r)
  (ch-quad-score (get b c r)
                 (get b (+ c 1) r)
                 (get b (+ c 2) r)
                 (get b (+ c 3) r)))

(define (ch-row-score b r)
  (+ (ch-horiz-from b 0 r)
     (ch-horiz-from b 1 r)
     (ch-horiz-from b 2 r)
     (ch-horiz-from b 3 r)))
     
     
(define (ch-diagonalne-score w x y z)
    (cond
        
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 100)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 150)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 20)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 10000)

	((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) -100)
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -150)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -20)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -10000)
         (else 0)))

(define (ch-diagonalne-from b c r)
  (ch-quadne-score (get b c r)
                   (get b (+ c 1) (+ r 1))
                   (get b (+ c 2) (+ r 2))
                   (get b (+ c 3) (+ r 3))))

(define (ch-quadne-score b r)
  (+ (ch-quadne-from b 0 r)
     (ch-quadne-from b 1 r)
     (ch-quadne-from b 2 r)
     (ch-quadne-from b 3 r)))

(define (ch-diagonalnw-score w x y z)
    (cond
        
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 100)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 150)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 20)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 10000)

	((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) -100)
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -150)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -20)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -10000)
         (else 0)))

(define (ch-diagonalnw-from b c r)
  (ch-quadnw-score (get b c r)
                   (get b (- c 1) (+ r 1))
                   (get b (- c 2) (+ r 2))
                   (get b (- c 3) (+ r 3))))

(define (ch-diagonalnw-score b r)
  (+ (ch-diagonalnw-from b 0 r)
     (ch-diagonalnw-from b 1 r)
     (ch-diagonalnw-from b 2 r)
     (ch-diagonalnw-from b 3 r)))

;; Paul Bruno
(define (pb-bogo b ) 
  (printf "wow! ~n")4)  

(define (pb-checkpos b)
  (cond 
    ( (= 1 (get b 1 2)) 999)
    ( (= 2 (get b 1 2)) -999)
  (else 5)))

(define (pb-quad-score w x y z)
  (cond
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and(= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and(= w 1) (= x 1) (= y 1) (= z 0)) 64)
    ((and(= w 1) (= x 1) (= y 1) (= z 1)) 9999)
    ((and(= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and(= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and(= w 2) (= x 2) (= y 2) (= z 0)) -64)
    ((and(= w 2) (= x 2) (= y 2) (= z 2)) -9999)
(else 0)))

(define (pb-column-score c)
  (+ (pb-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (pb-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (pb-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))))

(define (pb-board-score b)
  (+ (pb-column-score (vr b 0)) (pb-column-score (vr b 1))
     (pb-column-score (vr b 2)) (pb-column-score (vr b 3))
     (pb-column-score (vr b 4)) (pb-column-score (vr b 5))
     (pb-column-score (vr b 6))
     (pb-row-score b 0) (pb-row-score b 1 )
     (pb-row-score b 2) (pb-row-score b 3 )
     (pb-row-score b 4) (pb-row-score b 5 )))
  
(define (pb-horiz-from b c r)
  (pb-horizontal-quad-score (get b c r)
                 (get b (+ c 1) r)
                 (get b (+ c 2) r)
                 (get b (+ c 3) r)))

(define (pb-row-score b r)
  (+ (pb-horiz-from b 0 r)
     (pb-horiz-from b 1 r)
     (pb-horiz-from b 2 r)
     (pb-horiz-from b 3 r)))
     
(define (pb-horizontal-quad-score w x y z)
    (cond
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and (= w 0) (= x 1) (= y 0) (= z 0)) 1)
    ((and (= w 0) (= x 0) (= y 1) (= z 0)) 1)
    ((and (= w 0) (= x 0) (= y 0) (= z 1)) 1)
    ((and (= w 0) (= x 0) (= y 1) (= z 1)) 4)
    ((and (= w 1) (= x 0) (= y 1) (= z 0)) 5)
    ((and (= w 0) (= x 1) (= y 0) (= z 1)) 5)
    ((and (= w 1) (= x 0) (= y 0) (= z 1)) 5)
    ((and (= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and (= w 0) (= x 1) (= y 1) (= z 0)) 4)
    ((and (= w 1) (= x 1) (= y 1) (= z 0)) 64)
    ((and (= w 1) (= x 1) (= y 0) (= z 1)) 64)
    ((and (= w 1) (= x 0) (= y 1) (= z 1)) 64)
    ((and (= w 0) (= x 1) (= y 1) (= z 1)) 64)
    ((and (= w 1) (= x 1) (= y 1) (= z 1)) 9999)
    ((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and (= w 0) (= x 2) (= y 0) (= z 0)) -1)
    ((and (= w 0) (= x 0) (= y 2) (= z 0)) -1)
    ((and (= w 0) (= x 0) (= y 0) (= z 2)) -1)
    ((and (= w 0) (= x 0) (= y 2) (= z 2)) -4)
    ((and (= w 2) (= x 0) (= y 2) (= z 0)) -5)
    ((and (= w 0) (= x 2) (= y 0) (= z 2)) -5)
    ((and (= w 2) (= x 0) (= y 0) (= z 2)) -5)
    ((and (= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and (= w 0) (= x 2) (= y 2) (= z 0)) -4)
    ((and (= w 2) (= x 2) (= y 2) (= z 0)) -64)
    ((and (= w 2) (= x 2) (= y 0) (= z 2)) -64)
    ((and (= w 2) (= x 0) (= y 2) (= z 2)) -64)
    ((and (= w 0) (= x 2) (= y 2) (= z 2)) -64)
    ((and (= w 2) (= x 2) (= y 2) (= z 2)) -9999)
    (else 0)))

;; Ricardi Cruz
(define (rc-bogo b) 
  (printf "Not too bad..~n") 4)

(define (rc-checkpos b)
  (cond
    ((= (get b 3 0) 1) 1500)
    ((= (get b 3 0) 2) -1500)
    (else 5000)))

(define (rc-quad-score w x y z)
  (cond
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and (= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and (= w 1) (= x 1) (= y 1) (= z 0)) 3000)
    ((and (= w 1) (= x 1) (= y 1) (= z 1)) 9999)
    ((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and (= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and (= w 2) (= x 2) (= y 2) (= z 0)) -3000)
    ((and (= w 2) (= x 2) (= y 2) (= z 2)) -9999)
    (else (and (= w 0) (= x 0) (= y 0) (= z 0)) 0)))

(define (rc-column-score c)
  (+ (rc-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (rc-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (rc-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))))

(define (rc-horiz-quad-score w x y z)
  (cond
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and (= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and (= w 1) (= x 1) (= y 1) (= z 0)) 3000)
    ((and (= w 1) (= x 1) (= y 1) (= z 1)) 9999)
    ((and (= w 1) (= x 1) (= y 0) (= z 1)) 1000)
    ((and (= w 1) (= x 0) (= y 1) (= z 1)) 1000)
    ((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and (= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and (= w 2) (= x 2) (= y 2) (= z 0)) -3000)
    ((and (= w 2) (= x 2) (= y 2) (= z 2)) -9999)
    ((and (= w 2) (= x 2) (= y 0) (= z 2)) -1000)
    ((and (= w 2) (= x 0) (= y 2) (= z 2)) -1000)
    (else (and (= w 0) (= x 0) (= y 0) (= z 0)) 0)))

(define (rc-horiz-from b c r)
  (rc-horiz-quad-score (get b c r)
                 (get b (+ c 1) r)
                 (get b (+ c 2) r)
                 (get b (+ c 3) r)))

(define (rc-row-score b r)
  (+ (rc-horiz-from b 0 r)
     (rc-horiz-from b 1 r)
     (rc-horiz-from b 2 r)
     (rc-horiz-from b 3 r)
     (rc-horiz-from b 4 r)
     (rc-horiz-from b 5 r)))

(define (rc-diagonal-from b c r)
  (cond
    ((and (= c 6) (= r 0)) 
     (rc-horiz-quad-score (get b c r)
                (get b (- c 1) (+ r 1))
                (get b (- c 2) (+ r 2))
                (get b (- c 3) (+ r 3))))
    (else (rc-horiz-quad-score (get b c r)
                (get b (+ c 1) (+ r 1))
                (get b (+ c 2) (+ r 2))
                (get b (+ c 3) (+ r 3))))))

(define (rc-diagonal-score b)
  (+ (rc-diagonal-from b 0 0)
     (rc-diagonal-from b 1 1)
     (rc-diagonal-from b 2 2)
     (rc-diagonal-from b 3 3)
     (rc-diagonal-from b 4 4)
     (rc-diagonal-from b 5 5)
     (rc-diagonal-from b 6 0)
     (rc-diagonal-from b 6 1)
     (rc-diagonal-from b 6 2)
     (rc-diagonal-from b 6 3)
     (rc-diagonal-from b 6 4)
     (rc-diagonal-from b 6 5)
     (rc-diagonal-from b 6 6)))
     
(define (rc-board-score b)
  (+ (rc-column-score (vr b 0)) (rc-column-score (vr b 1))
     (rc-column-score (vr b 2)) (rc-column-score (vr b 3))
     (rc-column-score (vr b 6)) (rc-row-score b 0)
     (rc-row-score b 1) (rc-row-score b 2)
     (rc-row-score b 3) (rc-row-score b 4)
     (rc-row-score b 5) (rc-diagonal-score b)
     (rc-checkpos b))) 

;; League
(define (cal-quad-score a b c d)
  (cond
    ((and (= a 1) (= b 0)) 1)
    ((and (= a 1) (= b 1) (= c 0)) 4)
    ((and (= a 1) (= b 1) (= c 1) (= d 0)) 64)
    ((and (= a 1) (= b 1) (= c 1) (= d 1)) 9999)
    ((and (= a 2) (= b 0)) -1)
    ((and (= a 2) (= b 2) (= c 0)) -4)
    ((and (= a 2) (= b 2) (= c 2) (= d 0)) -64)
    ((and (= a 2) (= b 2) (= c 2) (= d 2)) -9999)
    (else 0)))
         
(define (cal-column-score c)
  (+ (cal-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (cal-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (cal-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))))

;; horizontal reasoning -- a bit more complex
(define (cal-quad-wins a b c d p)
  (and (= p a) (= p b) (= p c) (= p d)))

(define (cal-three-consecutive a b c d p)
  (or (and (= p a) (= p b) (= p c) (= 0 d))
      (and (= 0 a) (= p b) (= p c) (= 0 d))))

(define (cal-buildable-factor w x y z)
  (if (and (> w 0) (> x 0) (> y 0) (> z 0))
      1
      0.5))

(define (cal-three-taken a b c d p)
  (or (and (= p a) (= 0 b) (= p c) (= p d))
      (and (= p a) (= p b) (= 0 c) (= p d))))

(define (cal-two-consecutive a b c d p)
  (or (and (= p a) (= p b) (= 0 c) (= 0 d))
      (and (= 0 a) (= p b) (= p c) (= 0 d))
      (and (= 0 a) (= 0 b) (= p c) (= p d))))

(define (cal-two-taken a b c d p)
  (or (and (= p a) (= 0 b) (= 0 c) (= p d))
      (and (= p a) (= 0 b) (= p c) (= 0 d))
      (and (= 0 a) (= p b) (= 0 c) (= p d))))

(define (cal-one-taken a b c d p)
  (or (and (= p a) (= 0 b) (= 0 c) (= 0 d))
      (and (= 0 a) (= p b) (= 0 c) (= 0 d))
      (and (= 0 a) (= 0 b) (= p c) (= 0 d))
      (and (= 0 a) (= 0 b) (= 0 c) (= p d))))

(define (cal-hquad-score a b c d w x y z)
  (cond
    ((cal-quad-wins a b c d 1) 9999)
    ((cal-quad-wins a b c d 2) -9999)
    ((cal-three-consecutive a b c d 1) (* (cal-buildable-factor w x y z) 64))
    ((cal-three-consecutive a b c d 2) (* (cal-buildable-factor w x y z) -64))
    ((cal-three-taken a b c d 1) (* (cal-buildable-factor w x y z) 32))
    ((cal-three-taken a b c d 2) (* (cal-buildable-factor w x y z) -32))
    ((cal-two-consecutive a b c d 1) (* (cal-buildable-factor w x y z) 4))
    ((cal-two-consecutive a b c d 2) (* (cal-buildable-factor w x y z) -4))
    ((cal-two-taken a b c d 1) (* (cal-buildable-factor w x y z) 2))
    ((cal-two-taken a b c d 2) (* (cal-buildable-factor w x y z) -2))
    ((cal-one-taken a b c d 1) (* (cal-buildable-factor w x y z) 1))
    ((cal-one-taken a b c d 2) (* (cal-buildable-factor w x y z) -1))
    (else 0)))

(define (cal-horiz-from b c r)
  (cal-hquad-score
   (get b c r) 
   (get b (+ c 1) r) 
   (get b (+ c 2) r) 
   (get b (+ c 3) r)
   (get b c (- r 1)) 
   (get b (+ c 1) (- r 1))
   (get b (+ c 2) (- r 1))
   (get b (+ c 3) (- r 1))))

(define (cal-row-score b r)
  (+ (cal-horiz-from b 0 r)
     (cal-horiz-from b 1 r)
     (cal-horiz-from b 2 r)
     (cal-horiz-from b 3 r)))

(define (cal-ne-from b c r)
  (cal-hquad-score
   (get b (+ c 0) (+ r 0))
   (get b (+ c 1) (+ r 1))
   (get b (+ c 2) (+ r 2))
   (get b (+ c 3) (+ r 3))
   (get b (+ c 0) (- r 1))
   (get b (+ c 1) (+ r 0))
   (get b (+ c 2) (+ r 1))
   (get b (+ c 3) (+ r 2))))

(define (cal-ne-scores b)
  (+ (cal-ne-from b 0 2)
     (cal-ne-from b 0 1)
     (cal-ne-from b 0 0)
     (cal-ne-from b 1 2)
     (cal-ne-from b 1 1)
     (cal-ne-from b 1 0)
     (cal-ne-from b 2 2)
     (cal-ne-from b 2 1)
     (cal-ne-from b 2 0)
     (cal-ne-from b 3 2)
     (cal-ne-from b 3 1)
     (cal-ne-from b 3 0)))

(define (cal-nw-from b c r)
  (cal-hquad-score
   (get b (- c 0) (+ r 0))
   (get b (- c 1) (+ r 1))
   (get b (- c 2) (+ r 2))
   (get b (- c 3) (+ r 3))
   (get b (- c 0) (- r 1))
   (get b (- c 1) (+ r 0))
   (get b (- c 2) (+ r 1))
   (get b (- c 3) (+ r 2))))

(define (cal-nw-scores b)
  (+ (cal-nw-from b 6 2)
     (cal-nw-from b 6 1)
     (cal-nw-from b 6 0)
     (cal-nw-from b 5 2)
     (cal-nw-from b 5 1)
     (cal-nw-from b 5 0)
     (cal-nw-from b 4 2)
     (cal-nw-from b 4 1)
     (cal-nw-from b 4 0)
     (cal-nw-from b 3 2)
     (cal-nw-from b 3 1)
     (cal-nw-from b 3 0)))

(define (cal-board-score b)
  (+ (cal-column-score (vr b 0))
     (cal-column-score (vr b 1))
     (cal-column-score (vr b 2))
     (cal-column-score (vr b 3))
     (cal-column-score (vr b 4))
     (cal-column-score (vr b 5))
     (cal-column-score (vr b 6))
     (cal-row-score b 0)
     (cal-row-score b 1)
     (cal-row-score b 2)
     (cal-row-score b 3)
     (cal-row-score b 4)
     (cal-row-score b 5)
     (cal-ne-scores b)
     (cal-nw-scores b)
     ))


;;; main program

(define participants null)
(define (enter name h)
  (set! participants
;        (cons (cons (string-append name " #0") (minimax h 0))
              (cons (cons name (minimax h 2))
;                    (cons (cons (string-append name " #4") (minimax h 4))
                          participants)))
(enter "Chun" ch-board-score)
(enter "Paul" pb-board-score)
(enter "Ricardi" rc-board-score)
(enter "League" cal-board-score)

(define fr 
  (new c4-frame%
       (heuristic (lambda (b) 0))
       (players participants)))
(send fr show #t)
