(load "stdlib.scm")
(load "sets.scm")

(define sudoku-cell%
  (class model%
    (public set-domain remove clean)
    (init-field 
     (id 0)
     (domain '(1 2 3 4 5 6 7 8 9))
     (dirty #f))
    (define (set-domain d) 
      (set! domain d)
      (set! dirty #t)
      (send this changed this 'domain))
    (define (remove x)
      (when (element-of? x domain)
        (set-domain (remove-from-set x domain))))
    (define (clean)
      (set! dirty #f)
      (send this changed this 'clean))
    (super-new)))

(define sudoku-cell-view%
  (class canvas%
    (public update)
    (init-field (cell #f))
    (define (update c k)
      (send this refresh))
    (define (fill dc color)
      (send dc set-brush color 'solid)
      (send dc draw-rectangle 0 0
            (send this get-width) (send this get-height)))
    (define (paint-me cv dc)
      (let ((dom (get-field domain cell))
            (dir (get-field dirty cell)))
        (fill dc (if dir "yellow" "white"))
        (send dc set-brush "black" 'solid)
        (cond
          ((null? dom)       ;; no solution
           (fill dc "red"))
          ((null? (cdr dom)) ;; singleton
           (send dc draw-text (number->string (car dom)) 4 4))
          (else
           (for-each 
            (lambda (k)
              (case k
                ('1 (send dc draw-rectangle  4  4 2 2))
                ('2 (send dc draw-rectangle 10  4 2 2))
                ('3 (send dc draw-rectangle 16  4 2 2))
                ('4 (send dc draw-rectangle  4 10 2 2))
                ('5 (send dc draw-rectangle 10 10 2 2))
                ('6 (send dc draw-rectangle 16 10 2 2))
                ('7 (send dc draw-rectangle  4 16 2 2))
                ('8 (send dc draw-rectangle 10 16 2 2))
                ('9 (send dc draw-rectangle 16 16 2 2))))
            dom)))))
    (super-new 
     (min-width 32) (min-height 32) 
     (paint-callback paint-me) (style '(border)))
    (send cell attach this)))

;(define c1 (new sudoku-cell%))
;(define fr (new frame% (label "FOO")))
;(define cv (new sudoku-cell-view% (cell c1) (parent fr)))
;(send fr show #t)

(define sudoku-grid%
  (class model%
    (public show put update step resolve for-each at)
    (init-field
     (qm (new queue%)))
    (define (make-cell i j)
      (let ((c (new sudoku-cell% (id (cons i j)))))
        (send c attach this)
        c))
    (define (for-each f) (vec2d-tabulate 9 9 f))
    (define cells (for-each make-cell))
    (define (at i j)
      (vector-ref (vector-ref cells i) j))
    (define work (send qm initial))
    (define (show)
      (vec2d-for-each
       cells
       (lambda (i j c)
         (printf "~v,~v ~v~n" i j (get-field domain c)))))
    (define (put i j x)
      (send (at i j) set-domain (list x)))
    (define (update cell kind)
      (let* ((dom (get-field domain cell))
             (id (get-field id cell))
             (eq (lambda (d) (equal? id (get-field id d)))))
        (cond
          ((and (eq? kind 'domain)
                (not (null? dom))
                (null? (cdr dom))
                (not (send qm find eq work)))
           (set! work (send qm push cell work))
           (send this changed 'push))
          (else
           (send cell clean)))))
    (define (propagate cell)
      (let* ((id (get-field id cell))
             (value (car (get-field domain cell)))
             (r (car id))
             (c (cdr id))
             (br (floor (/ r 3)))
             (bc (floor (/ c 3))))
        (vec2d-for-each
         cells
         (lambda (i j d)
           (when (not (and (= r i) (= c j)))
             (when (or (= r i) (= c j)
                       (and (= br (floor (/ i 3)))
                            (= bc (floor (/ j 3)))))
               (printf "Removing ~v from ~v~n" value (cons i j))
               (send d remove value)))))))
    (define (step)
      (when (not (send qm empty? work))
        (let ((c (send qm peek work)))
          (set! work (send qm pop work))
          (send this changed 'pop)
          (propagate c))))
    (define (resolve)
      (when (not (send qm empty? work))
        (let ((c (send qm peek work)))
          (set! work (send qm pop work))
          (propagate c)
          (resolve))))
    (super-new)))

(define sudoku-grid-view%
  (class vertical-pane%
    (init-field (grid #f))
    (super-new)
    (double-loop*
     9 9
     (lambda (i) (new horizontal-pane% (parent this)))
     (lambda (pane i j)
       (new sudoku-cell-view%
            (parent pane) (cell (send grid at i j)))))))

(define g (new sudoku-grid%))
(define fr (new frame% (label "FOO")))
(define gv (new sudoku-grid-view% (grid g) (parent fr)))
(send fr show #t)

;(send g put 0 2 7)
;(send g put 0 3 2)
;(send g put 0 7 6)
;(send g put 1 3 5)
;(send g put 1 4 8)
;(send g put 1 5 6)
;(send g put 1 6 9)
;(send g put 1 8 7)
;(send g put 2 2 2)
;(send g put 2 3 1)
;(send g put 2 8 4)
;(send g put 3 0 4)
;(send g put 3 1 3)
;(send g put 3 2 8)
;(send g put 3 8 5)
;(send g put 4 0 6)
;(send g put 4 1 5)
;(send g put 4 3 8)
;(send g put 4 5 1)
;(send g put 4 7 4)
;(send g put 4 8 2)
;(send g put 5 0 2)
;(send g put 5 6 6)
;(send g put 5 7 9)
;(send g put 5 8 8)
;(send g put 6 0 8)
;(send g put 6 5 4)
;(send g put 6 6 1)
;(send g put 7 0 7)
;(send g put 7 2 3)
;(send g put 7 3 6)
;(send g put 7 4 1)
;(send g put 7 5 8)
;(send g put 8 1 2)
;(send g put 8 5 9)
;(send g put 8 6 4)
