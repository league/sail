(load "c4minimax.scm")

;(define (ch-bogo b)
;  (printf "Wow! ~n")
;  4)

(define (ch-checkpos b)
  (cond
    ((= 1 (get b 1 2)) 999)
    ((= 2 (get b 1 2)) -999)
    (else (get b 1 2) 5)))

(define be empty-board)

(define (ch-quad-score w x y z)
  (cond 
    ((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
    ((and (= w 1) (= x 1) (= y 0) (= z 0)) 4)
    ((and (= w 1) (= x 1) (= y 1) (= z 0)) 64)
    ((and (= w 1) (= x 1) (= y 1) (= z 1)) 999)
    ((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
    ((and (= w 2) (= x 2) (= y 0) (= z 0)) -4)
    ((and (= w 2) (= x 2) (= y 2) (= z 0))-64)
    ((and (= w 2) (= x 2) (= y 2) (= z 2)) -999)
     (else 0)))

(define (ch-column-score c)
  (+ (ch-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (ch-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (ch-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))
     (ch-column-score #(1 2 1 1 0 0))
     (ch-column-score #(1 2 1 2 0 0))
     (ch-column-score #(1 2 2 2 0 0))))
(define (ch-board-score b)
  (+
;   (ch-column-score (vr b 0)) (ch-column-score (vr b 1))
;   (ch-column-score (vr b 2)) (ch-column-score (vr b 3))
;   (ch-column-score (vr b 4)) (ch-column-score (vr b 5))
;   (ch-column-score (vr b 6))
   (ch-row-score b 0) (ch-row-score b 1)
   (ch-row-score b 2) (ch-row-score b 3)
   (ch-row-score b 4) (ch-row-score b 5)))

(define (ch-horiz-quad-score w x y z)
    (cond
        ((and (= w 0) (= x 0) (= y 0) (= z 1)) 1)
	((and (= w 0) (= x 0) (= y 1) (= z 0)) 1)
	((and (= w 0) (= x 0) (= y 1) (= z 1)) 8)
	((and (= w 0) (= x 1) (= y 0) (= z 0)) 1)
	((and (= w 0) (= x 1) (= y 0) (= z 1)) 1)
	((and (= w 0) (= x 1) (= y 1) (= z 0)) 10)
	((and (= w 0) (= x 1) (= y 1) (= z 1)) 999)
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 4)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 6)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 999)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 10)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 999)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 999)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 9999)

	((and (= w 0) (= x 0) (= y 0) (= z 2)) -1)
	((and (= w 0) (= x 0) (= y 2) (= z 0)) -1)
	((and (= w 0) (= x 0) (= y 2) (= z 2)) -8)
	((and (= w 0) (= x 2) (= y 0) (= z 0)) -1)
	((and (= w 0) (= x 2) (= y 0) (= z 2)) -8)
	((and (= w 0) (= x 2) (= y 2) (= z 0)) -10)
	((and (= w 0) (= x 2) (= y 2) (= z 2)) -999)
	((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) )
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -10)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -999)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -10)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -999)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -999)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -9999)
         (else 0)))
(define (ch-horiz-from b c r)
  (ch-quad-score (get b c r)
                 (get b (+ c 1) r)
                 (get b (+ c 2) r)
                 (get b (+ c 3) r)))0

(define (ch-row-score b r)
  (+ (ch-horiz-from b 0 r)
     (ch-horiz-from b 1 r)
     (ch-horiz-from b 2 r)
     (ch-horiz-from b 3 r)))

(define (ch-diagonalne-score w x y z)
    (cond
        
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 8)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 10)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 20)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 10000)

	((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) -8)
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -10)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -20)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -10000)
         (else 0)))

(define (ch-diagonalne-from b c r)
  (ch-quadne-score (get b c r)
                   (get b (+ c 1) (+ r 1))
                   (get b (+ c 2) (+ r 2))
                   (get b (+ c 3) (+ r 3))))

(define (ch-quadne-score b r)
  (+ (ch-quadne-from b 0 r)
     (ch-quadne-from b 1 r)
     (ch-quadne-from b 2 r)
     (ch-quadne-from b 3 r)))

(define (ch-diagonalnw-score w x y z)
    (cond
        
	((and (= w 1) (= x 0) (= y 0) (= z 0)) 1)
	((and (= w 1) (= x 0) (= y 0) (= z 1)) 8)
	((and (= w 1) (= x 0) (= y 1) (= z 0)) 10)
	((and (= w 1) (= x 0) (= y 1) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 0) (= z 0)) 20)
	((and (= w 1) (= x 1) (= y 0) (= z 1)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 0)) 1500)
	((and (= w 1) (= x 1) (= y 1) (= z 1)) 10000)

	((and (= w 2) (= x 0) (= y 0) (= z 0)) -1)
	((and (= w 2) (= x 0) (= y 0) (= z 2)) -8)
	((and (= w 2) (= x 0) (= y 2) (= z 0)) -10)
	((and (= w 2) (= x 0) (= y 2) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 0) (= z 0)) -20)
	((and (= w 2) (= x 2) (= y 0) (= z 2)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 0)) -1500)
	((and (= w 2) (= x 2) (= y 2) (= z 2)) -10000)
         (else 0)))

(define (ch-diagonalnw-from b c r)
  (ch-quadne-score (get b c r)
                   (get b (- c 1) (+ r 1))
                   (get b (- c 2) (+ r 2))
                   (get b (- c 3) (+ r 3))))

(define (ch-diagonalnw-score b r)
  (+ (ch-diagonalnw-from b 0 r)
     (ch-diagonalnw-from b 1 r)
     (ch-diagonalnw-from b 2 r)
     (ch-diagonalnw-from b 3 r)))
(play ch-board-score)



;(ch-quad-score 2 2 2 1)

