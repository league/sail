(load "c4minimax.scm")

;; vertical reasoning
(define (cal-quad-score a b c d)
  (cond
    ((and (= a 1) (= b 0)) 1)
    ((and (= a 1) (= b 1) (= c 0)) 4)
    ((and (= a 1) (= b 1) (= c 1) (= d 0)) 64)
    ((and (= a 1) (= b 1) (= c 1) (= d 1)) 9999)
    ((and (= a 2) (= b 0)) -1)
    ((and (= a 2) (= b 2) (= c 0)) -4)
    ((and (= a 2) (= b 2) (= c 2) (= d 0)) -64)
    ((and (= a 2) (= b 2) (= c 2) (= d 2)) -9999)
    (else 0)))
         
(define (cal-column-score c)
  (+ (cal-quad-score (vr c 0) (vr c 1) (vr c 2) (vr c 3))
     (cal-quad-score (vr c 1) (vr c 2) (vr c 3) (vr c 4))
     (cal-quad-score (vr c 2) (vr c 3) (vr c 4) (vr c 5))))

;; horizontal reasoning -- a bit more complex
(define (cal-quad-wins a b c d p)
  (and (= p a) (= p b) (= p c) (= p d)))

(define (cal-three-consecutive a b c d p)
  (or (and (= p a) (= p b) (= p c) (= 0 d))
      (and (= 0 a) (= p b) (= p c) (= 0 d))))

(define (cal-buildable-factor w x y z)
  (if (and (> w 0) (> x 0) (> y 0) (> z 0))
      1
      0.5))

(define (cal-three-taken a b c d p)
  (or (and (= p a) (= 0 b) (= p c) (= p d))
      (and (= p a) (= p b) (= 0 c) (= p d))))

(define (cal-two-consecutive a b c d p)
  (or (and (= p a) (= p b) (= 0 c) (= 0 d))
      (and (= 0 a) (= p b) (= p c) (= 0 d))
      (and (= 0 a) (= 0 b) (= p c) (= p d))))

(define (cal-two-taken a b c d p)
  (or (and (= p a) (= 0 b) (= 0 c) (= p d))
      (and (= p a) (= 0 b) (= p c) (= 0 d))
      (and (= 0 a) (= p b) (= 0 c) (= p d))))

(define (cal-one-taken a b c d p)
  (or (and (= p a) (= 0 b) (= 0 c) (= 0 d))
      (and (= 0 a) (= p b) (= 0 c) (= 0 d))
      (and (= 0 a) (= 0 b) (= p c) (= 0 d))
      (and (= 0 a) (= 0 b) (= 0 c) (= p d))))

(define (cal-hquad-score a b c d w x y z)
  (cond
    ((cal-quad-wins a b c d 1) 9999)
    ((cal-quad-wins a b c d 2) -9999)
    ((cal-three-consecutive a b c d 1) (* (cal-buildable-factor w x y z) 64))
    ((cal-three-consecutive a b c d 2) (* (cal-buildable-factor w x y z) -64))
    ((cal-three-taken a b c d 1) (* (cal-buildable-factor w x y z) 32))
    ((cal-three-taken a b c d 2) (* (cal-buildable-factor w x y z) -32))
    ((cal-two-consecutive a b c d 1) (* (cal-buildable-factor w x y z) 4))
    ((cal-two-consecutive a b c d 2) (* (cal-buildable-factor w x y z) -4))
    ((cal-two-taken a b c d 1) (* (cal-buildable-factor w x y z) 2))
    ((cal-two-taken a b c d 2) (* (cal-buildable-factor w x y z) -2))
    ((cal-one-taken a b c d 1) (* (cal-buildable-factor w x y z) 1))
    ((cal-one-taken a b c d 2) (* (cal-buildable-factor w x y z) -1))
    (else 0)))

(define (cal-horiz-from b c r)
  (cal-hquad-score
   (get b c r) 
   (get b (+ c 1) r) 
   (get b (+ c 2) r) 
   (get b (+ c 3) r)
   (get b c (- r 1)) 
   (get b (+ c 1) (- r 1))
   (get b (+ c 2) (- r 1))
   (get b (+ c 3) (- r 1))))

(define (cal-row-score b r)
  (+ (cal-horiz-from b 0 r)
     (cal-horiz-from b 1 r)
     (cal-horiz-from b 2 r)
     (cal-horiz-from b 3 r)))

(define (cal-ne-from b c r)
  (cal-hquad-score
   (get b (+ c 0) (+ r 0))
   (get b (+ c 1) (+ r 1))
   (get b (+ c 2) (+ r 2))
   (get b (+ c 3) (+ r 3))
   (get b (+ c 0) (- r 1))
   (get b (+ c 1) (+ r 0))
   (get b (+ c 2) (+ r 1))
   (get b (+ c 3) (+ r 2))))

(define (cal-ne-scores b)
  (+ (cal-ne-from b 0 2)
     (cal-ne-from b 0 1)
     (cal-ne-from b 0 0)
     (cal-ne-from b 1 2)
     (cal-ne-from b 1 1)
     (cal-ne-from b 1 0)
     (cal-ne-from b 2 2)
     (cal-ne-from b 2 1)
     (cal-ne-from b 2 0)
     (cal-ne-from b 3 2)
     (cal-ne-from b 3 1)
     (cal-ne-from b 3 0)))

(define (cal-nw-from b c r)
  (cal-hquad-score
   (get b (- c 0) (+ r 0))
   (get b (- c 1) (+ r 1))
   (get b (- c 2) (+ r 2))
   (get b (- c 3) (+ r 3))
   (get b (- c 0) (- r 1))
   (get b (- c 1) (+ r 0))
   (get b (- c 2) (+ r 1))
   (get b (- c 3) (+ r 2))))

(define (cal-nw-scores b)
  (+ (cal-nw-from b 6 2)
     (cal-nw-from b 6 1)
     (cal-nw-from b 6 0)
     (cal-nw-from b 5 2)
     (cal-nw-from b 5 1)
     (cal-nw-from b 5 0)
     (cal-nw-from b 4 2)
     (cal-nw-from b 4 1)
     (cal-nw-from b 4 0)
     (cal-nw-from b 3 2)
     (cal-nw-from b 3 1)
     (cal-nw-from b 3 0)))

(define (cal-board-score b)
  (+ (cal-column-score (vr b 0))
     (cal-column-score (vr b 1))
     (cal-column-score (vr b 2))
     (cal-column-score (vr b 3))
     (cal-column-score (vr b 4))
     (cal-column-score (vr b 5))
     (cal-column-score (vr b 6))
     (cal-row-score b 0)
     (cal-row-score b 1)
     (cal-row-score b 2)
     (cal-row-score b 3)
     (cal-row-score b 4)
     (cal-row-score b 5)
     (cal-ne-scores b)
     (cal-nw-scores b)
     ))
          
(play cal-board-score)
